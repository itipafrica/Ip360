{"version":3,"file":"use-supercluster.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport Supercluster from \"supercluster\";\nimport { BBox, GeoJsonProperties } from \"geojson\";\nimport { useDeepCompareEffectNoCheck } from \"use-deep-compare-effect\";\nimport { dequal } from \"dequal\";\n\nexport interface UseSuperclusterArgument<P, C> {\n  points: Array<Supercluster.PointFeature<P>>;\n  bounds?: BBox;\n  zoom: number;\n  options?: Supercluster.Options<P, C>;\n  disableRefresh?: boolean;\n}\n\nconst useSupercluster = <\n  P extends GeoJsonProperties = Supercluster.AnyProps,\n  C extends GeoJsonProperties = Supercluster.AnyProps\n>({\n  points,\n  bounds,\n  zoom,\n  options,\n  disableRefresh\n}: UseSuperclusterArgument<P, C>) => {\n  const superclusterRef = useRef<Supercluster<P, C>>();\n  const pointsRef = useRef<Array<Supercluster.PointFeature<P>>>();\n  const [clusters, setClusters] = useState<\n    Array<Supercluster.ClusterFeature<C> | Supercluster.PointFeature<P>>\n  >([]);\n  const zoomInt = Math.round(zoom);\n\n  useDeepCompareEffectNoCheck(() => {\n    if (disableRefresh === true) {\n      return;\n    }\n\n    if (\n      !superclusterRef.current ||\n      !dequal(pointsRef.current, points) ||\n      !dequal(\n        (superclusterRef.current as typeof superclusterRef.current & {\n          options: typeof options;\n        }).options,\n        options\n      )\n    ) {\n      superclusterRef.current = new Supercluster(options);\n      superclusterRef.current.load(points);\n    }\n\n    if (bounds) {\n      setClusters(superclusterRef.current.getClusters(bounds, zoomInt));\n    }\n\n    pointsRef.current = points;\n  }, [points, bounds, zoomInt, options, disableRefresh]);\n\n  return { clusters, supercluster: superclusterRef.current };\n};\n\nexport default useSupercluster;\n"],"names":["useSupercluster","points","bounds","zoom","options","disableRefresh","superclusterRef","useRef","pointsRef","useState","clusters","setClusters","zoomInt","Math","round","useDeepCompareEffectNoCheck","current","dequal","Supercluster","load","getClusters","supercluster"],"mappings":";;;;;AAcA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB;MAItBC,cAAAA;MACAC,cAAAA;MACAC,YAAAA;MACAC,eAAAA;MACAC,sBAAAA;AAEA,MAAMC,eAAe,GAAGC,MAAM,EAA9B;AACA,MAAMC,SAAS,GAAGD,MAAM,EAAxB;;AACA,kBAAgCE,QAAQ,CAEtC,EAFsC,CAAxC;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AAGA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWX,IAAX,CAAhB;AAEAY,EAAAA,2BAA2B,CAAC;AAC1B,QAAIV,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACD;;AAED,QACE,CAACC,eAAe,CAACU,OAAjB,IACA,CAACC,MAAM,CAACT,SAAS,CAACQ,OAAX,EAAoBf,MAApB,CADP,IAEA,CAACgB,MAAM,CACJX,eAAe,CAACU,OAAhB,CAEEZ,OAHE,EAILA,OAJK,CAHT,EASE;AACAE,MAAAA,eAAe,CAACU,OAAhB,GAA0B,IAAIE,YAAJ,CAAiBd,OAAjB,CAA1B;AACAE,MAAAA,eAAe,CAACU,OAAhB,CAAwBG,IAAxB,CAA6BlB,MAA7B;AACD;;AAED,QAAIC,MAAJ,EAAY;AACVS,MAAAA,WAAW,CAACL,eAAe,CAACU,OAAhB,CAAwBI,WAAxB,CAAoClB,MAApC,EAA4CU,OAA5C,CAAD,CAAX;AACD;;AAEDJ,IAAAA,SAAS,CAACQ,OAAV,GAAoBf,MAApB;AACD,GAxB0B,EAwBxB,CAACA,MAAD,EAASC,MAAT,EAAiBU,OAAjB,EAA0BR,OAA1B,EAAmCC,cAAnC,CAxBwB,CAA3B;AA0BA,SAAO;AAAEK,IAAAA,QAAQ,EAARA,QAAF;AAAYW,IAAAA,YAAY,EAAEf,eAAe,CAACU;AAA1C,GAAP;AACD,CA5CD;;;;"}